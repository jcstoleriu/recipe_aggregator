openapi: "3.0.2"
info:
  title: Recipe aggregator
  version: "1.0.0"
  description: The recipe aggregator website api

servers:
  - url: http://localhost:3000/

components:
  schemas:
    Recipe:
      type: object
      properties:
        recipeId: 
          type: integer
          nullable: false
        coreInfo:
          $ref: '#/components/schemas/RecipeCard'
        ingredients:
          type: array
          items:
            type: string
        instructions:
          type: string
        source: 
          type: string 
          description: The link of the original recipe (or original if applies)
        addedAt:
          type: string
          format: date
    RecipeCard:
      type: object
      properties:
        recipeCardId:
          type: integer
          nullable: false
        title:
          type: string
        photo:
          type: object
          nullable: true
        mealTag: 
          $ref: '#/components/schemas/MealTag'
        additionalTags:
          type: array
          items: 
            type: string
    MealTag:
      type: string
      enum: ['breakfast', 'lunch', 'dinner', 'dessert', 'snack']
  
  responses:
    BadRequest:
      description: Request was not well-formed, see error details
      content:
        application/json:
          schema:
            type: object
            properties:
              error-message:
                type: string
                description: Error message detailing the problem with the request
    NotFound:
      description: Resource not found
    NoResults:
      description: List empty; no results
    ServerError:
      description: Server error; no results, try again later
    Unauthorized:
      description: Client error; unauthenticated access
    Forbidden:
      description: Client error; unauthorized credentials

  parameters:
    page:
      in: query
      name: page
      description: Used for paginating the results; the current page
      required: true
      schema:
        type: integer
        default: 1
    limit:
      in: query
      name: limit
      description: Used for pagination the results; the amount of items per page
      required: false
      schema:
        type: integer
        default: 10
    id: 
      in: path
      name: id
      required: true
      schema:
        type: integer
    auth_token:
      in: header
      name: Authorization
      description: Authentication token required for making authenticated requests to the endpoints
      required: true
      schema:
        type: string

paths:
  /:
    get:
      tags:
        - All recipes
      description:
        Get all recipes
      responses:
        '200':
          description: 'Recipes retrieved'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipeCard'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Single recipe
      description: 
        Create new recipe
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Recipe'
      responses:
        '201':
          description: 'Recipe created successfully'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipeCard'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /{recipe_id}:  
    get:
      tags:
        - Single recipe
      description: 
        Returns a single recipe by id
      responses:
        '200':
          description: Recipe retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      tags:
        - Single Recipe
      description: 
        Edit a recipe by id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Recipe'
      responses:
        '201':
          description: 'Recipe created successfully'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipeCard'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags: 
        - Single Recipe
      description: Delete recipe by id
      requestBody: 
        required: true
        content:
          application/json:
            schema:
              type: integer
      responses:
        '200':
          description: Request processed; recipe deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipeCard'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'